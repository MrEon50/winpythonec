#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
WinPython EXE Compiler (WinPythonEC)
Automatyczny kompilator EXE oparty na ≈õrodowisku WinPython

Autor: Cody (Sourcegraph AI Assistant)
"""

import os
import sys
import subprocess
import shutil
import zipfile
import tempfile
from pathlib import Path
import argparse


class WinPythonEXECompiler:
    def __init__(self):
        self.winpython_path = None
        self.python_exe = None
        self.pip_exe = None
        
    def show_menu(self):
        """Wy≈õwietla menu z opisem dzia≈Çania programu"""
        print("=" * 70)
        print("üêç WinPython EXE Compiler (WinPythonEC) üêç")
        print("=" * 70)
        print("DZIA≈ÅANIE:")
        print("Program kompiluje skrypty Python (.py) do samodzielnych plik√≥w EXE")
        print("u≈ºywajƒÖc ≈õrodowiska WinPython i PyInstaller.")
        print()
        print("FUNKCJE:")
        print("‚Ä¢ Wykorzystuje przeno≈õne ≈õrodowisko WinPython")
        print("‚Ä¢ Automatycznie instaluje PyInstaller je≈õli potrzeba")
        print("‚Ä¢ Kompiluje w trybie --onefile (jeden plik EXE)")
        print("‚Ä¢ Obs≈Çuguje dodatkowe biblioteki")
        print("‚Ä¢ Pakuje wynik do archiwum ZIP")
        print("‚Ä¢ Nie modyfikuje systemowego Pythona")
        print()
        print("ZASTOSOWANIE:")
        print("Idealne do tworzenia aplikacji do dystrybucji bez wymagania")
        print("instalacji Pythona na komputerze docelowym.")
        print("=" * 70)
        print()

    def validate_winpython_path(self, path):
        """Sprawdza czy podana ≈õcie≈ºka to prawid≈Çowe ≈õrodowisko WinPython"""
        if not os.path.exists(path):
            return False, "Podana ≈õcie≈ºka nie istnieje"
            
        # Szukamy python.exe w r√≥≈ºnych mo≈ºliwych lokalizacjach
        possible_python_paths = [
            os.path.join(path, "python.exe"),
            os.path.join(path, "Scripts", "python.exe"),
            os.path.join(path, "python-3*", "python.exe"),
        ]
        
        # Sprawdzamy r√≥wnie≈º w podfolderach
        for root, dirs, files in os.walk(path):
            if "python.exe" in files:
                python_path = os.path.join(root, "python.exe")
                # Sprawdzamy czy to nie systemowy Python
                if "WinPython" in python_path or path.lower() in python_path.lower():
                    self.python_exe = python_path
                    # Szukamy pip.exe w tym samym folderze lub Scripts
                    pip_path = os.path.join(os.path.dirname(python_path), "Scripts", "pip.exe")
                    if not os.path.exists(pip_path):
                        pip_path = os.path.join(os.path.dirname(python_path), "pip.exe")
                    
                    if os.path.exists(pip_path):
                        self.pip_exe = pip_path
                    else:
                        self.pip_exe = None
                    
                    return True, "≈örodowisko WinPython znalezione"
        
        return False, "Nie znaleziono python.exe w ≈õrodowisku WinPython"

    def check_pyinstaller(self):
        """Sprawdza czy PyInstaller jest zainstalowany"""
        try:
            result = subprocess.run([self.python_exe, "-m", "pip", "show", "pyinstaller"], 
                                  capture_output=True, text=True, check=False)
            return result.returncode == 0
        except Exception:
            return False

    def install_pyinstaller(self):
        """Instaluje PyInstaller w ≈õrodowisku WinPython"""
        print("üîß PyInstaller nie jest zainstalowany. Instalujƒô...")
        try:
            if self.pip_exe and os.path.exists(self.pip_exe):
                cmd = [self.pip_exe, "install", "pyinstaller"]
            else:
                cmd = [self.python_exe, "-m", "pip", "install", "pyinstaller"]
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=False)
            
            if result.returncode == 0:
                print("‚úÖ PyInstaller zosta≈Ç pomy≈õlnie zainstalowany")
                return True
            else:
                print(f"‚ùå B≈ÇƒÖd instalacji PyInstaller: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå WyjƒÖtek podczas instalacji PyInstaller: {e}")
            return False

    def install_additional_libraries(self, libraries):
        """Instaluje dodatkowe biblioteki"""
        if not libraries:
            return True
            
        print(f"üì¶ Instalujƒô dodatkowe biblioteki: {', '.join(libraries)}")
        
        for lib in libraries:
            try:
                if self.pip_exe and os.path.exists(self.pip_exe):
                    cmd = [self.pip_exe, "install", lib]
                else:
                    cmd = [self.python_exe, "-m", "pip", "install", lib]
                
                result = subprocess.run(cmd, capture_output=True, text=True, check=False)
                
                if result.returncode == 0:
                    print(f"‚úÖ {lib} - zainstalowana pomy≈õlnie")
                else:
                    print(f"‚ö†Ô∏è  {lib} - b≈ÇƒÖd instalacji: {result.stderr}")
                    return False
            except Exception as e:
                print(f"‚ùå WyjƒÖtek podczas instalacji {lib}: {e}")
                return False
        
        return True

    def compile_to_exe(self, script_path, output_dir):
        """Kompiluje skrypt Python do EXE u≈ºywajƒÖc PyInstaller"""
        print("üî® Rozpoczynam kompilacjƒô...")
        
        script_name = os.path.splitext(os.path.basename(script_path))[0]
        
        # Przygotowujemy komendƒô PyInstaller
        cmd = [
            self.python_exe, "-m", "PyInstaller",
            "--onefile",
            "--distpath", output_dir,
            "--workpath", os.path.join(output_dir, "build"),
            "--specpath", os.path.join(output_dir, "spec"),
            script_path
        ]
        
        try:
            print(f"Wykonujƒô: {' '.join(cmd)}")
            result = subprocess.run(cmd, capture_output=True, text=True, check=False)
            
            if result.returncode == 0:
                exe_path = os.path.join(output_dir, f"{script_name}.exe")
                if os.path.exists(exe_path):
                    print(f"‚úÖ Kompilacja zako≈Ñczona pomy≈õlnie!")
                    print(f"üìÅ Plik EXE: {exe_path}")
                    return exe_path
                else:
                    print("‚ùå Kompilacja zako≈Ñczona, ale nie znaleziono pliku EXE")
                    return None
            else:
                print(f"‚ùå B≈ÇƒÖd kompilacji:")
                print(f"STDOUT: {result.stdout}")
                print(f"STDERR: {result.stderr}")
                return None
                
        except Exception as e:
            print(f"‚ùå WyjƒÖtek podczas kompilacji: {e}")
            return None

    def create_zip_package(self, exe_path, output_dir):
        """Tworzy archiwum ZIP z plikiem EXE"""
        if not exe_path or not os.path.exists(exe_path):
            return None
            
        exe_name = os.path.splitext(os.path.basename(exe_path))[0]
        zip_path = os.path.join(output_dir, f"{exe_name}_package.zip")
        
        try:
            print("üì¶ Tworzƒô archiwum ZIP...")
            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                zipf.write(exe_path, os.path.basename(exe_path))
                
                # Dodajemy plik README
                readme_content = f"""
{exe_name} - Aplikacja Python skompilowana do EXE

Utworzono przy u≈ºyciu WinPython EXE Compiler (WinPythonEC)

URUCHOMIENIE:
Wystarczy uruchomiƒá plik {os.path.basename(exe_path)}

WYMAGANIA:
Brak - aplikacja jest samodzielna i nie wymaga instalacji Pythona.

Data utworzenia: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
                zipf.writestr("README.txt", readme_content)
            
            print(f"‚úÖ Archiwum utworzone: {zip_path}")
            return zip_path
            
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd tworzenia archiwum: {e}")
            return None

    def cleanup_build_files(self, output_dir):
        """Usuwa pliki tymczasowe po kompilacji"""
        try:
            build_dir = os.path.join(output_dir, "build")
            spec_dir = os.path.join(output_dir, "spec")
            
            if os.path.exists(build_dir):
                shutil.rmtree(build_dir)
                print("üßπ Usuniƒôto folder build")
                
            if os.path.exists(spec_dir):
                shutil.rmtree(spec_dir)
                print("üßπ Usuniƒôto folder spec")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Nie uda≈Ço siƒô usunƒÖƒá plik√≥w tymczasowych: {e}")

    def run_interactive(self):
        """Uruchamia program w trybie interaktywnym"""
        self.show_menu()
        
        # Pobieramy ≈õcie≈ºkƒô do WinPython
        while True:
            winpython_path = input("üìÅ Podaj ≈õcie≈ºkƒô do WinPython (np. C:\\WinPython\\WPy64-310111): ").strip()
            if not winpython_path:
                print("‚ùå ≈öcie≈ºka nie mo≈ºe byƒá pusta!")
                continue
                
            is_valid, message = self.validate_winpython_path(winpython_path)
            if is_valid:
                self.winpython_path = winpython_path
                print(f"‚úÖ {message}")
                print(f"üêç Python: {self.python_exe}")
                break
            else:
                print(f"‚ùå {message}")
                continue
        
        # Pobieramy ≈õcie≈ºkƒô do skryptu
        while True:
            script_path = input("\nüìÑ Podaj ≈õcie≈ºkƒô do skryptu Python (.py): ").strip()
            if not script_path:
                print("‚ùå ≈öcie≈ºka nie mo≈ºe byƒá pusta!")
                continue
                
            if not os.path.exists(script_path):
                print("‚ùå Plik nie istnieje!")
                continue
                
            if not script_path.lower().endswith('.py'):
                print("‚ùå Plik musi mieƒá rozszerzenie .py!")
                continue
                
            break
        
        # Dodatkowe biblioteki
        print("\nüìö Dodatkowe biblioteki (opcjonalne)")
        libraries_input = input("Podaj nazwy bibliotek oddzielone spacjƒÖ (Enter = pomi≈Ñ): ").strip()
        additional_libraries = libraries_input.split() if libraries_input else []
        
        # Sprawdzamy i instalujemy PyInstaller
        if not self.check_pyinstaller():
            if not self.install_pyinstaller():
                print("‚ùå Nie uda≈Ço siƒô zainstalowaƒá PyInstaller. Przerywam.")
                return False
        else:
            print("‚úÖ PyInstaller jest ju≈º zainstalowany")
        
        # Instalujemy dodatkowe biblioteki
        if additional_libraries:
            if not self.install_additional_libraries(additional_libraries):
                print("‚ö†Ô∏è  Niekt√≥re biblioteki nie zosta≈Çy zainstalowane. Kontynuujƒô...")
        
        # Przygotowujemy folder wyj≈õciowy
        output_dir = os.path.join(self.winpython_path, "compiled_apps")
        os.makedirs(output_dir, exist_ok=True)
        
        # Kompilujemy
        exe_path = self.compile_to_exe(script_path, output_dir)
        
        if exe_path:
            # Tworzymy archiwum
            zip_path = self.create_zip_package(exe_path, output_dir)
            
            # SprzƒÖtamy
            self.cleanup_build_files(output_dir)
            
            print("\n" + "=" * 50)
            print("üéâ KOMPILACJA ZAKO≈ÉCZONA POMY≈öLNIE! üéâ")
            print("=" * 50)
            print(f"üìÅ Plik EXE: {exe_path}")
            if zip_path:
                print(f"üì¶ Archiwum: {zip_path}")
            print("=" * 50)
            
            return True
        else:
            print("\n‚ùå Kompilacja nie powiod≈Ça siƒô!")
            return False

    def run_cli(self, args):
        """Uruchamia program z argumentami linii polece≈Ñ"""
        # Walidacja WinPython
        is_valid, message = self.validate_winpython_path(args.winpython)
        if not is_valid:
            print(f"‚ùå {message}")
            return False
            
        self.winpython_path = args.winpython
        print(f"‚úÖ ≈örodowisko WinPython: {self.winpython_path}")
        
        # Walidacja skryptu
        if not os.path.exists(args.script):
            print(f"‚ùå Skrypt nie istnieje: {args.script}")
            return False
            
        if not args.script.lower().endswith('.py'):
            print("‚ùå Plik musi mieƒá rozszerzenie .py!")
            return False
        
        # Sprawdzamy PyInstaller
        if not self.check_pyinstaller():
            if not self.install_pyinstaller():
                return False
        
                # Instalujemy dodatkowe biblioteki
        if args.libraries:
            if not self.install_additional_libraries(args.libraries):
                print("‚ö†Ô∏è  Niekt√≥re biblioteki nie zosta≈Çy zainstalowane.")
        
        # Kompilujemy
        output_dir = os.path.join(self.winpython_path, "compiled_apps")
        os.makedirs(output_dir, exist_ok=True)
        
        exe_path = self.compile_to_exe(args.script, output_dir)
        
        if exe_path:
            # Tworzymy archiwum je≈õli nie wy≈ÇƒÖczono
            zip_path = None
            if not args.no_zip:
                zip_path = self.create_zip_package(exe_path, output_dir)
            
            # SprzƒÖtamy je≈õli nie wy≈ÇƒÖczono
            if not args.keep_build:
                self.cleanup_build_files(output_dir)
            
            print("\nüéâ KOMPILACJA ZAKO≈ÉCZONA POMY≈öLNIE!")
            print(f"üìÅ Plik EXE: {exe_path}")
            if zip_path:
                print(f"üì¶ Archiwum: {zip_path}")
            
            return True
        else:
            print("‚ùå Kompilacja nie powiod≈Ça siƒô!")
            return False


def create_argument_parser():
    """Tworzy parser argument√≥w linii polece≈Ñ"""
    parser = argparse.ArgumentParser(
        description="WinPython EXE Compiler - Kompiluje skrypty Python do EXE u≈ºywajƒÖc WinPython",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Przyk≈Çady u≈ºycia:

  Tryb interaktywny:
    python winpython_ec.py

  Tryb CLI:
    python winpython_ec.py -w "C:\\WinPython\\WPy64-310111" -s "moj_skrypt.py"
    
  Z dodatkowymi bibliotekami:
    python winpython_ec.py -w "C:\\WinPython\\WPy64-310111" -s "app.py" -l requests numpy pandas
    
  Bez tworzenia ZIP:
    python winpython_ec.py -w "C:\\WinPython\\WPy64-310111" -s "app.py" --no-zip
        """
    )
    
    parser.add_argument(
        "-w", "--winpython",
        help="≈öcie≈ºka do folderu WinPython (np. C:\\WinPython\\WPy64-310111)"
    )
    
    parser.add_argument(
        "-s", "--script",
        help="≈öcie≈ºka do skryptu Python (.py) do skompilowania"
    )
    
    parser.add_argument(
        "-l", "--libraries",
        nargs="*",
        help="Dodatkowe biblioteki do zainstalowania (oddzielone spacjƒÖ)"
    )
    
    parser.add_argument(
        "--no-zip",
        action="store_true",
        help="Nie tw√≥rz archiwum ZIP z wynikiem"
    )
    
    parser.add_argument(
        "--keep-build",
        action="store_true",
        help="Zachowaj pliki tymczasowe kompilacji (build, spec)"
    )
    
    parser.add_argument(
        "--version",
        action="version",
        version="WinPython EXE Compiler v1.0"
    )
    
    return parser


def main():
    """G≈Ç√≥wna funkcja programu"""
    parser = create_argument_parser()
    args = parser.parse_args()
    
    compiler = WinPythonEXECompiler()
    
    # Je≈õli nie podano argument√≥w, uruchamiamy tryb interaktywny
    if not args.winpython and not args.script:
        try:
            success = compiler.run_interactive()
            sys.exit(0 if success else 1)
        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è  Program przerwany przez u≈ºytkownika")
            sys.exit(1)
        except Exception as e:
            print(f"\n‚ùå Nieoczekiwany b≈ÇƒÖd: {e}")
            sys.exit(1)
    
    # Sprawdzamy czy podano wymagane argumenty dla trybu CLI
    if not args.winpython:
        print("‚ùå Wymagana ≈õcie≈ºka do WinPython (-w/--winpython)")
        parser.print_help()
        sys.exit(1)
        
    if not args.script:
        print("‚ùå Wymagana ≈õcie≈ºka do skryptu (-s/--script)")
        parser.print_help()
        sys.exit(1)
    
    # Uruchamiamy w trybie CLI
    try:
        success = compiler.run_cli(args)
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Program przerwany przez u≈ºytkownika")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Nieoczekiwany b≈ÇƒÖd: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

